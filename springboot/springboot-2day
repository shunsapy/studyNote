1.跨域cros
springboot实现WebMvcConfigurer,并实现addCorsMappings方法，添加允许跨域的请求路径、请求头、请求方法、试探有效期时间、可跨的域名等等

@Configuration
public class MyWebMvcConfig implements WebMvcConfigurer {
	@Override
	public void addCorsMappings(CorsRegistry registry) {
		// TODO Auto-generated method stub
		registry.addMapping("/book/**")
				.allowedHeaders("*")
				.allowedMethods("*")
				.maxAge(1800)
				.allowedOrigins("http://localhost:8081");
	}
}

配置完成后，可实现前后端分离、微服务等跨域请求。

2.注册拦截器
创建一个拦截器类，让其实现拦截器接口HandlerInterceptor：
public class LoginInterceptorl implements HandlerInterceptor{
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		// TODO Auto-generated method stub
		System.out.println("login-preHandle");
		return HandlerInterceptor.super.preHandle(request, response, handler);
	}
	
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("login-postHandle");

		HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
	}
	
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		// TODO Auto-generated method stub
		System.out.println("login-afterCompletion");

		HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
	}

}

所有拦截器链路上都先执行preHandle方法，然后执行请求方法，再执行postHandler,最后执行afterCompletion方法
注意：拦截器链路上只要有一个preHandle返回的是false，则之后的所有方法都不会执行，包括拦截器链路

注册到拦截器链路上ddInterceptor，并指定拦截的路径规则addPathPatterns：
@Configuration
public class MyWebMvcConfig implements WebMvcConfigurer {

	
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		// TODO Auto-generated method stub
		registry.addInterceptor(new LoginInterceptorl()).addPathPatterns("/**").excludePathPatterns("/hello");
		...
		...
	}
}


3.springboot整合servlet、filter、listener
实际上使用了srping、springmvc之后，基本上不用配置servlet、filter、listener，但是在使用第三方插件或者组件时，
可能需要配置servlet，比如一些报表插件等等，使用@WebServlet、@WebFilter、@WebListener。

@WebServlet("/my")
public class MyServlet extends HttpServlet {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doPost(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		System.out.println("my doPost!!!");
	}
	
}

@WebFilter("/*")
public class MyFilter implements Filter {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		// TODO Auto-generated method stub
		System.out.println("myFilter doFilter");
		chain.doFilter(request, response);
	}
	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// TODO Auto-generated method stub
		System.out.println("myFilter init");
	}
	
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		System.out.println("myFilter---destroy");
	}
}

@WebListener
public class MyListener implements ServletRequestListener {

	
	@Override
	public void requestInitialized(ServletRequestEvent sre) {
		// TODO Auto-generated method stub
		System.out.println("MyListener --- requestInitialized");
	}
	
	@Override
	public void requestDestroyed(ServletRequestEvent sre) {
		// TODO Auto-generated method stub
		System.out.println("MyListener --- requestDestroyed");
	}
}

最后，在springboot启动类上增加@ServletComponentScan，将扫描@WebServlet、@WebFilter、@WebListener注解的类
@SpringBootApplication
@ServletComponentScan
public class Springboot1Application {

	public static void main(String[] args) {
		SpringApplication.run(Springboot1Application.class, args);
	}

}

4.配置路径映射
如果只是单纯的跳转页面，不需要处理数据，则可以集中统一在配置类中配置需要映射的路径和页面关系，这样便于管理
@Configuration
public class MyWebMvcConfig implements WebMvcConfigurer {

	
	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		// TODO Auto-generated method stub
		registry.addViewController("/index").setViewName("index");
	}
}


5.springboot之面向切面编程（AOP）
假如有这么个场景，在现有的已经投入生产的应用当中增加一个统计各模块在用户那边使用的频率情况，该如何做？
是写一个通用的统计方法，然后在各个模块的业务调用处一一调用这个方法来统计模块用户使用量？
这样的话，需要大动代码，且此统计功能要在后续下线的话，又得再改回来，实在是很麻烦，还很容易给生产环境引入bug。
如果能在执行方法前后动态的添加其他执行代码，那么这个统计功能就很容易实现，后期也很容易将其下线。
AOP就是这么个解决方案，面向切面编程。
AOP的几个关键名词：
Joinpoint：连接点，即需要被AOP增强的方法；
PointCut：切入点，顾名思义，对JoinPoint进行拦截，拦截切入的规则点，比如service包下的所有service当中的所有方法、所有以xxx开头的方法等等；
Advice：通知，拦截到JointPoint之后要做的事，比如上文提到的统计业务的使用频率即调用此方法的次数；
Aspect：切面，PointCut和Advice的结合；
Target：目标对象，要增强的类。

SpringBoot实现AOP：
a.首先引入AOP的自动配置依赖包
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-aop</artifactId>
</dependency>

b.编写切面
@Component
//声明切面
@Aspect
public class LogAspect {
	//切入点
	@Pointcut("execution(* com.gxl.zyf.*.service.impl.*.*(..))")
	public void pc() {
		
	}
	//前置通知，即方法调用钱首先执行
	@Before(value = "pc()")
	public void before(JoinPoint jp) {
		String name = jp.getSignature().getName();
		System.out.println(name + "方法开始执行");
	}
	//后置通知，即方法调用结束后执行
	@After(value="pc()")
	public void after(JoinPoint jp) {
		String name = jp.getSignature().getName();
		System.out.println(name + "方法执行结束");
	}
	//后置返回值通知，即方法结束后可以获取方法的返回值
	//此方法返回Object，说明返回一切类型，即所有又返回值的方法都会执行此通知
	//如果返回值的类型被定义为某一个类型，那只有拥有某类型返回值的方法会被拦截通知
	@AfterReturning(value="pc()",returning = "result")
	public void afterreturning(JoinPoint jp,Object result) {
		String name = jp.getSignature().getName();
		System.out.println(name + "方法返回值为：" +result);
		
	}
	//异常通知，即此方法出异常后调用此通知方法
	@AfterThrowing(value = "pc()",throwing = "e")
	public void afterThrowing(JoinPoint jp,Exception e) {
		String name = jp.getSignature().getName();
		System.out.println(name + "方法抛异常了，异常为：" + e.getMessage());
		
	}
	//环绕通知，此通知为最强大的通知，可以实现前置、后置、返回通知、异常通知、参数拦截、返回值更改、
	//甚至终止方法执行等等操作
	//此通知一般需要线程安全的环境下执行
	//所以，一般能用前置、后置等通知，就尽量少用环绕通知
	@Around(value = "pc()")
	public Object around(ProceedingJoinPoint pjp) throws Throwable {
		//这段在切入点拦截到接入点JoinPoint的时候最先执行
		System.out.println(Arrays.toString(pjp.getArgs()));
		System.out.println(pjp.getTarget());
		System.out.println(pjp.getSignature());
		//end
		//此方法使接入点继续执行
		return pjp.proceed();
	}
}
